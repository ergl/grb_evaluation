{driver,grb_bench}.

{mode,max}.
{duration,2}.
{concurrent,300}.
{report_interval,5}.

%% {key_generator, {uniform_int_to_binary, 36, 1000000}}.
{value_generator, {fixed_bin, 256}}.
%% Custom key generator to customize conflict ratio
{key_generator, {function, hook_grb, generator, [
    #{
        %% The key the workers will read/update if they want to conflict,
        %% and the probability that workers pick the shared key
        shared_key => <<"global_key">>
        , conflict_ratio => 0

        %% could switch to {pareto_int, 1_000_000} or {truncated_pareto_int, 1_000_000}
        %% to emulate the zipfian distr from the NMSI paper
        %% the `truncated_*` version will _never_ generate keys larger than the given
        %% max key, while the non-truncated version may do so.
        %% Use undefined, or remove key, if we always want to use the unique worker key
        , generator => {uniform_int, 1_000_000_000}
    }
]}}.

%% Pre hooks (set up connection pools)
{pre_hook, {hook_grb, start}}.

%% Size of the connection pool, and node
%% to choose as the bootstrap node for ring info
{pre_hook_args, [[{conn_pool_size, 6},
                  %% id_len sets the bith lenght of identifiers to messages.
                  {conection_opts, #{id_len => 16}},
                  {connection_port, 7878}]]}.

%% Available operations:
%% ping
%% uniform_barrier
%% readonly_red_track
%% readonly_blue | readonly_red
%% writeonly_blue | writeonly_red
%% read_write_blue | read_write_red
%% readonly_blue_barrier | readonly_red_barrier
%% writeonly_blue_barrier | writeonly_red_barrier
%% read_write_blue_barrier | read_write_red_barrier
{operations,[
    {readonly_red_track, 1}
]}.

{readonly_ops, 1}.
{writeonly_ops, 1}.

%% Op ratio for read write
%% The first number is the readonly ops
%% The second the number of update ops
{ratio, {1, 1}}.

%% Should transactions re-use old clocks?
%% (uniform barriers will always re-use clocks)
%% if not, use ping
{reuse_cvc, false}.

%% Should we retry until commit? (only applicable to red transactions)
{retry_aborts, false}.
